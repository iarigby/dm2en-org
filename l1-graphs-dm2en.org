# -*- mode:org; mode: flyspell; -*-

#+BEGIN_COMMENT
#+END_COMMENT

#+SETUPFILE: l-common.org


#+TITLE: Discrete mathematics II. - Graphs
#+SHORT_TITLE: Graphs
#+INCLUDE: tikz/graph-common.org

* Introduction
*** About graphs
One may think about graphs as "dots connected with lines or arrows"
\ie undirected or directed graphs.

**** Undirected graph example 					      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.49
     :END:
#+ATTR_LATEX: :width 6cm
[[file:tikz/graph1.tikz]]
**** Directed graph example 					      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.49
     :END:      
#+LATEX: \tikzset{edge/.append style={->,>=stealth}}
#+ATTR_LATEX: :width 6cm
[[file:tikz/graph1.tikz]]
* Undirected graphs
** Basic definitions
*** Undirected graph
**** Undirected graph					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     An *undirected graph* or (just a) *graph* is a $G=(\varphi,E,V)$
     triplet, where
     - $V$ is the *set of vertices*, 
     - $E$ is the *set of edges* and
     - $\varphi$ is the *connection map*, so that $\varphi(e)\subset V$
       and $1\le \card{\varphi(e)} \le 2$ for each $e\in E$.
       \ie $\varphi$ maps each edge $e$ to an (unordered) pair of
       vertices $\{v_1,v_2\}\subset V$.
*** Terminology
     - If $e\in E$ we have $v\in \varphi(e)$, then *the edge $e$ is
       connected to the vertex $v$* or *the vertex $v$ is an endpoint of
       edge $e$*.
     - If no edge is connected to $v\in V$, then $v$ is an *isolated
       vertex*.
     - If $E=\emptyset$ \ie it has no edges, then it is an *empty
       graph*.
     - Note: The set $E$ can be omitted from the definition, because
       $E=\dmn(\varphi)$.  
     - Two different *edges $e_1$ and $e_2$ are adjacent* if
       $\varphi(e_1)\cap\varphi(e_2)\neq\emptyset$, \ie there is a
       common vertex to which they are connected to.
     - Similarly, two different *vertices $v_1$ and $v_2$ are adjacent*
       if $\varphi(e)=\{v_1,v_2\}$, \ie if there is a common edge of
       which they are endpoints of.
     - An edge connected to only one vertex is called a *loop*.
*** Terminology 
    - Two different edges $e_1$ and $e_2$ are *parallel* if
      $\varphi(e_1)=\varphi(e_2)$ \ie they are connected to the same
      vertices.
    - A graph is *simple* if contain no loops an no parallel edges.
    - A graph is a *multi\-graph* if it contains loops or parallel edges.
    - If the number of elements in both $E$ and $V$ is finite, then we
      have a *finite graph*, otherwise it is an *infinite graph*.
    - If not stated otherwise, all graphs mentioned will be finite.  
    - For a graph $G=(\varphi,E,V)$ and $S\subset V$, let \[
      E(S)=\bigl\{e \in E : \exists v \in S \land \exists v' \in E
      \setminus S \land \varphi(e)=\{v,v'\} \bigr\},\] \ie $E(S)$ is
      the set of edges which connect to one vertex (one endpoint) in
      $S$ and the other in $V\setminus S$.  Note: $E(S)=E(V\setminus
      S)$.
*** Degree of a vertex
    - The *degree* of a vertex $v\in V$ is \[ \deg(v) = \card{ \{ e \in
      E : v \in \varphi(e) \} } + \card{ \{e \in E : \varphi(e)
      = \{v\} \} } \] \ie the number of edges connected to $v$ counting the
      loops twice. Sometimes the notations $d(v)$ or $\delta(v)$ is
      used.
    - A graph is *$n$-regular* (for $n\in\N$) if $v\in V \rightarrow
      \deg(v)=n$.
    - A graph is *regular* if $\exists n\in\N$ for which it is
      $n$-regular.
    - A vertex $v\in V$ is isolated $\iff$ $\deg(v)=0$.
    
    - If $G=(\varphi,E,V)$ is a finite graph, then $\sum_{v\in
      V}\deg(v) = 2 \card{E}$
      - starting from an empty graph, the introduction of each new edge
       	increases the sum by $2$, ergo there is an even number of
       	vertices with odd degrees.
*** Example							  :B_example:
    :PROPERTIES:
    :BEAMER_env: example
    :END:
**** Graph							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
     #+ATTR_LATEX: :height 4cm
     [[file:./tikz/graph1.tikz]]
**** Values 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
     - $V=\{v_1,v_2,v_3,v_4,v_5\}$
     - $E=\{e_1,e_2,e_3,e_4,e_5\}$
       - $\varphi(e_1)=\varphi(e_2)=\{v_1,v_2\}$
       - $\varphi(e_3)=\{v_1,v_4\}$
       - $\varphi(e_4)=\{v_3,v_4\}$
       - $\varphi(e_5)=\{v_4\}$
     - $e_1$ and $e_2$ are parallel
     - $e_5$ is a loop
     - $v_5$ is isolated
       - $\deg(v_1)=3$
       - $\deg(v_2)=2$
       - $\deg(v_3)=1$
       - $\deg(v_4)=4$
       - $\deg(v_5)=0$
** Isomorphic graphs
*** Isomorphism
**** Isomorphism of graphs				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The graphs $G=(\varphi,E,V)$ and $G'=(\varphi',E',V')$ are
     *isomorphic* if 
     - $\exists f:V\to V'$ bijection,
     - $\exists g:E\to E'$ bijection and
     - $\forall e \in E$ and $\forall v \in V$ if $v'=f(v)$ and
       $e'=g(e)$ then $v \in \varphi(e) \iff v' \in \varphi'(e')$,
     \ie the $(f,g)$ pair of maps "preserves" the connection relation.
**** Note
     - The isomorphism of graphs is very important! Because the focus
       of interest is the connection relation between the edges and
       vertices, \ie dots connected with lines, if we ignore the
       (names of) the edges and vertices, we can study all the graphs
       isomorphic to each other.
     - Isomorphism is used throughout the study of graphs, whenever
       $E$ and $V$ are not defined.
*** Some well known graphs   
**** Complete graph, cycle, path, star 			       :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:
     - A *complete graphs* (or a cliques) are a simple graphs with an
       edge between each pair of vertices. The complete graph with $n$
       vertices is $K_n$.
     - The *cycles* with $n$ vertices is the graph with $n$ vertices
       on a circle with vertex is connected to its neighbor. This is $C_n$.
     - If we delete one edge from $C_{n+1}$ then we obtain the $n$
       long *path* denoted by $P_n$, \ie $n$ edges connecting $n+1$
       vertices forming a single line.
     - A *star* is the graph with $n$ vertices on a circle, each
       connected to the vertex in the center.  The star with $n+1$
       vertices is $S_n$.
     - The *hyper\-cubes* $H_n$ (described later) with $n$ vertices
       are also isomorphic to each other.
*** $K_4,C_4,P_4$ and $S_4$
**** $K_4$ and $C_4$ 						      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.25
     :END:
     #+BEGIN_CENTER
     $K_4$
     #+ATTR_LATEX: :height 2.5cm
     [[file:tikz/k4.tikz]]
     $C_4$
     #+ATTR_LATEX: :height 2.5cm
     [[file:tikz/c4.tikz]]
     #+END_CENTER
**** $P_4$ and $S_4$ 						      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.25
     :END:
     #+BEGIN_CENTER
     $P_4$
     #+ATTR_LATEX: :height 2.5cm
     [[file:./tikz/p4.tikz]] 
     $S_4$
     #+ATTR_LATEX: :height 2.5cm
     [[file:./tikz/s4.tikz]] 
     #+END_CENTER
**** $P_4$ and $S_4$ 						      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.50
     :END:
     - Because the graphs $K_n$, $C_n$, $P_n$, $S_n$ are actually
       classes (sets) of graphs, we do not specify the edges or the
       vertices.
     - Any graph isomorphic to \eg $K_4$ as seen on the picture is
       also a $K_4$ graph.
*** Bipartite graphs
****  Bipartite graph					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
      A $G=(\varphi,E,V)$ graph is a bipartite graph, if $\exists V',
      V'' \subset V$ so that
      - $V' \cap V'' = \emptyset$,
      - $V' \cup V'' = V$ and
      - for every edge $e\in E$, $\varphi(e) \cap V' \neq \emptyset$
        and $\varphi(e) \cap V'' \neq \emptyset$
      \ie the set of vertices $V$ of a *bipartite graph* can be split
      into two non-empty, disjoint sets so that $V'\cup V''=V$, and
      each edge has one endpoint in $V'$ and the other in $V''$.

      #+BEGIN_CENTER
      #+ATTR_LATEX: :width 2cm
      [[file:./tikz/bp.tikz]]
      #+END_CENTER
*** Cartesian product of graphs
**** Cartesian product					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G_i=(\varphi_i,E_i,V_i)$ ($i\in I$) be an indexed family of
     graphs.  The *Cartesian product* of these graphs is the graph
     $G=(\varphi,E,V)$, where 
     - $V=\times_{i\in I} V_i=\{(v_1,v_2,\ldots) : v_1 \in V_1 \land
       v_2 \in V_2 \land \cdots \}$,
     - $\varphi(e)=\{v,v'\}$ if and only if there is a $j\in I$ so that
       - $\{i \in I : v_i \neq v'_i \}=\{j\}$ and
       - $\exists e_j \in E_j$ and $\varphi_j(e_j)=\{v_j,v'_j\}$
     \ie two vertices are connected if and only if they differ in one
     component only, and if the index of the differing component is
     $j$ then the components are connected in $G_j$. 
*** The hyper\-cube
**** The hyper\-cube 						  :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :END:
     - The 0-dimensional hyper\-cube $H_0$ consists of one vertex. 
     - The 1-dimensional hyper\-cube $H_1$ consists of two vertices
       connected with a single edge.  
     - For $n>1$, the $n$-dimensional hyper\-cube is obtained from the
       Cartesian product of $n$ number of $H_1$ hyper\-cubes, \ie
       \[ H_n = H_{n-1} \times H_1.\]
     An equivalent definition of $H_n$ is: 
     - $V$ contains $n$ long strings of $0$'s and $1$'s, and
       there is an edge between two vertices if they differ only in one
       element.  
** Sub\-graphs
*** Sub\-graphs
**** Sub\-graph, saturated sub\-graph 			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:      
     - $G'=(\varphi',E',V')$ is a *sub\-graph* of $G=(\varphi,E,V)$
       (or $G$ is a *super\-graph* of $G'$) if $E'\subset E$,
       $V'\subset V$ and $\varphi' \subset \varphi$.

 Let $G'$ be a sub\-graph of $G$.
**** Induced sub\-graph
     - If $G'$ contains all the edges with endpoints in $V'$ (\ie $G'$
       is the largest sub\-graph with edges connected to $V'$), then
       $G'$ is a *saturated (or full) sub\-graph induced by $V'$*, of
       a graph $G$ if it has the same vertex set as $G$.
*** Complement graph
**** Complement graph					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - The *complement graph of $G'$ with regards to $G$* is the graph
       $(\varphi|_{E\setminus E'},E\setminus E',V)$. 
     - If $G$ is a simple graph with $n$ vertices, then the
       *complement of $G$* is the complement of $G$ with regards to
       $K_n$, \ie the complement of a simple graph is the graph with
       the same vertices and the edges missing from the original
       graph.
       
     In the example below we have a simple graph, its complement, and
     the complete graph:
  
     #+BEGIN_CENTER
     [[file:./tikz/comp.tikz]]
     #+END_CENTER
*** Deleting edges end vertices
**** Deleting edges end vertices			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\varphi,E,V)$ be a graph. 
     - If $E'\subset E$, the sub\-graph $G'=(\varphi|_{E\setminus
       E'},E\setminus E',V)$ is obtained by *deleting the set of edges
       $E'$*.
     - If $V'\subset V$, then $G'=(\varphi|_{E\setminus E'},E',V')$ is
       the sub\-graph obtained by *deleting the set of vertices $V'$*,
       where $E'=\{e\in E : \varphi(e) \cap V' \neq \emptyset\}$ \ie
       the subset of edges which have either endpoint in $V'$.
*** Walks, trails, routes
**** Walks, trails, routes				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\varphi,E,V)$ be a graph.  
     - An $n$ long *walk* from vertex $v$ to vertex $v'$ is a finite
       series $v_0,e_1,v_1,\ldots,v_{n-1},e_n,v_n$, where $v_0=v$ and
       $v_n=v'$ and $\varphi(e_) = \{v_{i-1},v_i\}$, \ie the edge
       $e_i$ connects the vertices $v_{i-1}$ and $v_i$. 
       - If $v=v'$ the walk is *closed*, otherwise it is *open*.
     - If all the edges in a walk from $v$ to $v'$ are different, then
       it is a *trail* (or a *line*).  
       - If this walk is closed then the trail is also *closed trail*,
         otherwise it is *open*.
     - If all the vertices $v_0,v_1,\ldots,v_n$ are different in a
       walk, it is called a *route* or a *path*. 
       - An /at least 1 long/ closed trail is a *cycle* (or *circle*)
         if all the vertices in the trail are different with the
         exception of the beginning and the end.
*** Distance, diameter
**** Distance						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The *distance* between two vertices $v$ and $v'$ is
     the minimum length of the walks between them (if there exists a
     walk between them, otherwise it is $+\infty$). 
**** Diameter						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The *diameter* of a graph is the supremum (least upper bound) of
     the distances between all the vertices in the graph.  (For a
     finite graph, you can use simply the maximum of the lengths).
*** Examples
**** Examples and clarification					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     - A walk of length 0 is a route.
     - Walks of length 1 are routes if they are not loops.
     - A route can not contain loops, parallel edges or the same edge
       more than once.  Ergo, routes are also trails.

     - Cycles of length 1 are loop edges, cycles of length 2 contain
       two vertices and two parallel edges.
     - Cycles of length 3, 4 \etc are sometimes referred to as a
       triangle, square etc.
*** Walk to route
**** Walk to route 						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     With the previous notation, for each graph $G$, for each walk
     between $v$ and $v'$ ($v\neq v'$), a route between $v$ and $v'$ can be
     obtained in $G$ by deleting the adequate $e_i$, $v_i$ pairs.

**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     If $v_i=v_j$, $i<j$, then let us delete
     $e_{i+1},v_{i+1},e_{i+2},v_{i+2},\ldots,e_j,v_j$ from the walk,
     and repeat this procedure until all the vertices in the remaining
     walk are all different.  Because the length of the walk decreases
     after each step, the procedure eventually comes to a halt.
*** Closed trails are made up of disjoint cycles
**** Closed trails are made up of disjoint cycles 		  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:      
     In every graph $G$, every closed trail of at least one length is
     the union of cycles with disjoint edges.
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - If there are no repeating vertices on the trail, except the first
       and the last one, then it is a cycle and we are done.  
     - Otherwise there is at least one vertex recurring on the trail.
       At this vertex the trail can be split into two (shorter) closed
       trails. 
     - By repeating this procedure on the two closed sub\-trails, we
       obtain shorter and shorter closed trail, until we are left with
       only cycles.
** Trees
*** Connected graphs, trees
**** Connectedness, components 				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - A graph is *connected* if there exists a walk (or equivalently a route) between any two
       vertices of the graph.
     - The relation on $V$ defined on two vertices if and only if they
       are connected via a walk (or route) is an equivalence relation
       (reflexive, transitive and symmetrical).  The sub\-graphs
       spanned by the classes generated by this equivalence relation
       are the *components* of the original graph.
       - Two vertices from different components can not be adjacent so
	 each edge belongs to only one component.  
       - A graph is connected if and only if it consists of one
         component.
**** Tree						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A *tree* is a connected graph which contains no cycles.
*** Alternative definitions of trees
**** Alternative definitions of trees				  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     The following statements are equivalent for the simple graph $G$:
     1) $G$ is a tree (\ie connected and without cycles);
     2) $G$ is connected, the remaining sub\-graph after deleting an
	edge is disconnected;
     3) if $v$ and $v'$ are different vertices of $G$, then there
	exists exactly one route between $v$ and $v'$;
     4) $G$ does not contain any cycle, but the graph obtained by
	adding an edge between two of its vertices has a cycle.
*** Proof (part 1)
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
    - $1\Rightarrow 2$: If the edge between $v$ and $v'$ is deleted,
      and the graph is connected, then there is a route between $v$
      and $v'$ in the sub\-graph, so returning that edge would
      introduce a cycle.

    - $2\Rightarrow3$: If there were two different routes between $v$
      and $v'$: $v=v_0,v_1,v_2,\ldots,v_n=v'$ and
      $v=v_0',v_1',v_2',\ldots,v_m' = v'$.  Let $k=\min\{i : v_i\neq
      v_i'\}$.  Deleting the edge between $v_{k-1}$ and $v_k$ would
      leave the graph connected, because in all walks, that edge can
      be replaced with the walk
      $v_{k-1},v_k',v_{k+1}',\ldots,v_m'=v'=v_n,v_{n-1}\ldots,v_{k+1},v_k$.
    
    - $3\Rightarrow 1$: If there is a cycle $v,v',\ldots,v$ in the
      graph, then there are two routes from $v$ to $v'$.
*** Proof (part 2)
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
    - $1\Rightarrow 4$: A tree has no cycles and adding a loop, adds
      a cycle. Adding a new edge with endpoints $v\neq v'$ and
      combining this edge with the route from $v$ to $v'$ again
      introduces a cycle.

    - $4\Rightarrow1$: Add a temporary edge to the graph with
      endpoints $v$ and $v'$.  The temporary edge is part of a cycle.
      So deleting the temporary edge from the cycle leaves us with a
      route from $v$ to $v'$ in the original graph. Since this is true
      for each vertex pair $v$, $v'$, the graph is connected.
*** Two vertices with degree one
**** Two vertices with degree one				  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     If a finite graph $G$ contains no cycles, but contains edges,
     then there are at least two vertices with degree one.  
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - $\deg(v)=1=\deg(v')$ if there is a route of maximal length the
       graph from $v$ to $v'$.
     - If $\deg(v)\neq 1$ then there is an $e$ not part of that route,
       so that $\varphi(e)=\{v,w\}$.
       - If $w$ is not on the route, the route is not of maximal
         length.
       - If $w$ is on the route, the graph would contain a cycle.
*** Number of edges in a tree
**** Alternative definitions of trees 				  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     The following statements are equivalent for the simple finite
     graph $G$ with $n$ vertices:
     1) $G$ is a tree;
     2) $G$ has no cycles and has $n-1$ edges;
     3) $G$ is connected and has $n-1$ edges.
*** Proof
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     For $n=1$ it is trivial.  Suppose $G$ is a tree and $n>1$, and
     let $v_n$ be a vertex in $G$ which has only one adjacent vertex
     $v_{n-1}$.  
     - $1\Rightarrow 2$: Delete vertex $v_n$: the remaining graph $G'$
       is a tree, because $v_n$ can only an endpoint of any route in
       $G$.
     - $2\Rightarrow 3$: $G$ is connected because there is a route
       from $v_n$ to $v_{n-1}$ and (by induction) there is a route
       from $v_{n-1}$ to any other vertex in $G'$. 
     - $3\Rightarrow 1$:
       If $G$ would have a cycle, then deleting any edge from the cycle would leave us with a connected graph.  
       Continue deleting the edges until no cycles are left, \ie until a tree is obtained.  
       If we deleted $k$ edges, than we obtain a tree with $n$ vertices and $n-k-1$ edges.
       But since 1 implies 2, only $k=0$ is possible.  
*** Spanning tree
**** Spanning tree					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The *spanning tree* of $G$ is a sub\-graph $T$ which is a tree
     and has the same set of vertices as $G$.  (Of course only
     connected graphs have spanning trees.)
**** COMMENT TODO Example
**** Spanning trees 						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Every connected graph has a spanning tree.
**** Proof
     - Keep deleting edges of cycles while there are cycles.
     - The graph remains connected.
     - After a finite number of steps, the process halts: the
       remaining graph has no cycles and it is connected.
*** Number of cycles
**** Number of cycles 						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     A finite connected graph $G=(\varphi, E, V)$ contains at least
     $\card{E}-\card{V}+1$ cycles with different sets of edges.
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - Let $T$ be a spanning tree of $G$.
     - It has $\card{V}-1$ edges.
     - Let $E'$ be the set of edges of $G$ which are not in $T$.
     - If $e\in E'$, then adding this edge to $T$ introduces a cycle
       $C_e$.
     - Of course, $C_e$ is part of the original graph.
     - The edge $e$ is on the cycle $C_e$, but if $e\neq e'\in E'$,
       then $e$ is not in $C_{e'}$, so the sets of edges of each
       cycle $C_e$ for each $e\in E'$ are mutually different.
*** Remarks
    - The set of edges of each cycle $C_e$ is uniquely defined by
      each $e\in E'$, because if adding an edge to the spanning tree
      $T$ would yield two different cycles, that would mean that
      there were two different routes between the end points off the
      added edge in $T$, so $T$ wouldn't be a tree.  

    - This system of cycles is the *basic cycle system* determined
      by the spanning tree $T$.

    - There might be other cycles in the graph, but it can be shown
      that all cycles can be systematically expressed using the basic
      cycle system.
      
    - The boundary given in the theorem is only a lower bound, \eg the
      graph defined by the edges of a tetrahedron has more than
      $\card{E}-\card{V}-1$ edges.
*** Cut sets
**** Cut set						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\varphi, E, V)$ a graph.  
     - If $v',v''$ are vertices, $V'\subset V$, and for each route
       from $v'$ to $v''$, there exists a vertex $v\in V'$ which is on
       that route, then *$V'$ separates (or cuts) $v'$ and $v''$*.
     - If $E'\subset E$, and for each route from $v'$ to $v''$ there
       is an edge $e\in E'$ which is on that route, then *$E'$
       separates $v'$ and $v''$*.  
     \ie if you remove $V'$ (or $E'$), $v'$ and $v''$ will be
     separated, so there is no route connecting them.
     - If there are vertices which are separated by a set of edges
       $E'$, then $E'$ is a *separating set of edges*. 
     - If a separating set of edges has no trivial subset which is
       also a separating set, it is called a *cut set*.
**** COMMENT TODO example
*** Number of cut sets
**** Number of cut sets 					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     In a finite connected graph $G=(\varphi, E, V)$ there are at
     least $\card{E}-\card{V}+1$ cut sets.
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Let $T$ be a spanning tree of $G$ and $E'$ the set of its edges.
     - If we remove an edge $e\in E'$ from $T$ it will be separated
       into two components: $T_1$ and $T_2$.
     - $\card{E'}=\card{V}-1$ and for each edge $e\in E'$ the set
       $E_e=(E\setminus E')\cup\{e\}$ is a separating set (of the entire
       graph) so it contains at least one cut set.
       - $E_e$ is a separating set because all the routes from $T_1$
         to $T_2$ either go through $e$ or one of the edges in
         $E\setminus E'$.
     - Let this cut set be $C_e$, so that $e\in C_e$ and $C_e\subset
       E_e$, then for each $e\in E'$ the cut sets $C_e$ are different.
       - Moreover, $E_e$ contains exactly one cut set which contains
         $e$ and the edges from $E\setminus E'$ which have one end in
         $T_1$ and the other in $T_2$.
*** Forests
**** Forest 						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A graph without cycles is a *forest*.  
     - The components of a forest are trees, and trees are connected
       forests.  
     - A sub\-graph, which consists of spanning trees of the
       components of its super\-graph is a *spanning forest* of the
       super\-graph.
     - The number of edges of a finite forest is: $\card{V}-C$ where
       $C$ is the number of components.
     - Forest and spanning to unconnected graphs are the same as trees
       and spanning trees to connected graphs.
** Special walks
*** Euler trails
**** Euler trail					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     In a finite graph, a trail form $v$ to $v'$ or a closed trail is
     an *Euler trail* if it contains all edges of the graph.  

     - If $v\neq v'$ then at each occurrence of $v$ on the trail,
       there are exactly two edges connected to $v$ except for the
       first occurrence, so the degree of $v$ is odd.  Similarly, the
       degree of $v'$ is also odd while the degrees of all remaining
       vertices are even.
     - If $v=v'$ then the degrees of all vertices are even.
*** Euler trails
**** Decomposition of finite connected graphs  		  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     A finite connected graph contains a closed Euler trail if and
     only if all vertices have even degrees.  If a finite connected
     graph contains $2s$ number of vertices with odd degrees, where
     $s\in \N^+$, then the graph is made up of $s$ number of trails
     with mutually disjoint edges.
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     For $s=0$ \ie $\forall d(v)$ even, the proof is constructive.
     1. A vertex $v\in V$ is  a closed trail with no edges.  
     2. Extend this closed trail into a longer closed trail, until all
	edges are used up.  
	1. If there is an unused edge, there is a vertex $v'$ connected
           to it.
	2. Start a trail from $v'$ always choosing unused edges.
	3. Because all vertices are connected to an even number of
           unused edges, we can only get stuck (\ie can not continue) if
           we return to $v'$.  
	4. Adding this closed trail to the previous one results in a
           longer closed trail.
*** Proof (part 2)
**** Proof for $s>0$  
     Let $s>0$.  
     1. Connect the $2s$ number of vertices with odd degrees in pairs
	with $s$ number of temporary edges.
     2. The graph including the temporary edges contains a closed Euler
	trail (because every vertex has even degrees).  
     3. Deleting the $s$ number of virtual edges, brakes up the closed
	Euler trail into $s$ number of open trails with mutually
	disjoint sets of edges.
*** Hamilton routes
**** Hamilton route 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A route from $v$ to $v'$ is a *Hamiltonian route* if it contains
     all vertices of a graph.  
**** Hamiltonian cycle, Hamiltonian graph		       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A *Hamiltonian cycle* (or Hamiltonian circuit) is a cycle which
     contains all vertices of the graph.  A graph is a *Hamiltonian
     graph* if it contains a Hamiltonian cycle.
**** Ore's theorem						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Let $G$ be a (finite and simple) graph with $n\ge 3$ vertices.
     If $\deg(v) + \deg(w) \ge n$ for every pair of non-adjacent
     vertices $v$ and $w$, then $G$ is Hamiltonian.
*** Proof of Ore's theorem
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Indirect proof: if a graph is not Hamiltonian, then $\deg(v) +
     \deg(w) < n$ for at least one pair of non-adjacent vertices $v$
     and $w$.
     - For each $G$ graph which is non-Hamiltonian, there is a
       non-Hamiltonian graph $H$ which is a super\-graph of $G$, but
       adding any edge to $H$ would introduce a Hamiltonian cycle.
     - Let $x$ and $y$ be any two non-adjacent vertices in $H$.
     - Adding the edge between $x$ and $y$ introduces a Hamiltonian cycle, ergo
       there is a Hamiltonian route $x=v_1,v_1,\ldots,v_n=y$. 
     - For each index $i$ ($2 \le i \le n$), consider the two possible
       edges in $H$ from $v_1$ to $v_i$ and from $v_{i-1}$ to $v_n$.
*** Proof of Ore's theorem
**** Proof part 2
     - For each index $i$ in the range $2 \le i \le n$, consider the two
       possible edges in $H$ from $v_1$ to $v_i$ and from $v_{i-1}$ to
       $v_n$.
     - At most one of these two edges can be present in $H$,
       otherwise the cycle $v_1, v_2, \ldots, v_{i-1}, v_n,
       v_{n-1}. \ldots, v_i$ would be a Hamiltonian cycle.
     - The total number of edges connected to either $v_1$ or $v_n$ is
       at most equal to the number of choices of $i$, which is $n-1$.
     - So in $H$, $\deg(v) + \deg(w)<n$.
     - The degree of vertices in $G$ are at most equal to the degrees
       in $H$, so $\deg(v) + \deg(w)<n$ is also true in $G$.
*** 
**** Consequence of Ore's theorem 				  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     If a finite simple graph $G$ with $n\ge 3$ vertices has
     $\deg(v)\ge n/2$ for all vertices $v$, then $G$ is Hamiltonian.
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Because $\deg(v)\ge n/2$ for all vertices, $\deg(v)+\deg(w)\ge
     n/2 + n/2=n$, therefore by Ore's theorem, $G$ is Hamiltonian.  
** Labeling of graphs
*** Labeled and weighted graphs
**** Labeled and weighted graphs 			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - In practice, edges and/or vertices hold additional data.
     - If $G=(\varphi, E, V)$ is a graph, $L_e$ and $L_v$ are the sets
       of labels (for edges and vertices respectively), furthermore
       the labeling maps of edges and vertices are $\ell_e\colon E \to
       L_e$ and $\ell_v \colon V \to L_v$, then $(\varphi, E, V,
       \ell_e, L_e, \ell_v, L_v)$ is *labeled graph*.
     - Sometimes only the edges or only the vertices are labeled, then
       the adequate elements are omitted.
     - Sometimes the word *coloring* is used instead of labeling, and
       the labels are colors.
*** Kruskal's algorithm
**** Weighted graphs
     Often $L_e=\R$ or $L_v=\R$, and in this case the term *weighted
     graph* is used and the weight map $w$ connects the elements of
     the graph to their *weights*.  In a $(\varphi, E, V, w)$ graph
     with weighted edges, the weight of $E' \subset E$ is
     $w(E')=\sum_{e\in E'}w(e)$, and in a graph with weighted
     vertices, the weight of $V' \subset V$ is $w(V')=\sum_{v\in
     V'}w(v)$.
**** Kruskal's algorithm					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Let $G=(\varphi,E,V)$ be a finite weighted graph.
     1. Initialize: $E'\gets \emptyset$.
     2. Terminate?: If $E'\cup \{e\}$ contains a cycle for any $e\in
        E\setminus E'$, then the edges in $E'$ are the edges of a
        minimal weight spanning forest.
     3. Expand $E'$: Let $e\in E\setminus E'$ an edge with
        $w(e)=\min\{w(e'):e'\in E\setminus E'\}$ \ie an unused edge
        with minimal weight and set $E'\gets E'\cup\{e\}$. Go to step 2.
*** Proof of Kruskal's algorithm
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     It is enough to restrict the proof to one component only.  
     - It is clear, that the result will be a spanning tree $T$.
     - Suppose a $T'$ spanning tree with minimal weight, which has the
       most possible common edges with $T$, and with smaller weight
       than $T$ (then $T$ is not a spanning tree with minimal weight).
     - Let $e'$ be an edge of $T'$ which is not an edge of $T$.
     - If $e'$ is added to $T$ than this will add exactly one $C$
       cycle.
     - For all $e$ edges of the $C$ cycle, it is true that $w(e)\le
       w(e')$, because if $w(e)>w(e')$ then the algorithm would have
       chosen $e'$ instead of $e$.
     - If we omit $e'$ from $T'$, then it will not be connected, it
       will separate into two components.
*** Proof of Kruskal's algorithm
**** Part 2 of the proof 					    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - There has to be one more edge $e''$ on the cycle $C$ which
       connects the two components ($e''$ is obviously not from $T'$),
       and if we exchange $e'$ for $e''$ in $T'$ we get another tree
       $T''$.
     - We have shown that $w(e'')\le w(e')$.
     - If $w(e'')<w(e')$, than the weight of $T''$ would be strictly
       less than the weight of $T'$, and that would imply that $T'$ is
       not a spanning tree of minimal weight, which leads to a
       contradiction.
     - On the other hand, $w(e'')=w(e')$ would imply that $T''$ has
       more common edges with $T$ than $T'$, which is again a
       contradiction.
*** Remarks
**** Remark
     - Kruskal's algorithm is an example of a *greedy algorithm*,
       because it always chooses the best possible solution.
     - However this greedy strategy does not always give optimal
       results with all algorithms, \eg see TSP (traveling salesman
       problem).  
       - TSP is equivalent to finding a Hamiltonian path in a graph.
* Directed graphs
** Basic definitions
*** Directed graph
    You can imagine directed graphs as a set of dots connected with arrows.  
**** Directed graph					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A *directed graph* $G=(\psi, E, V)$ is a triplet with $E$ as the
     set of edges, $V$ as the set of vertices, and $\psi\colon E \to
     V\times V$.  If $\psi(e)=(v,v')$, then $v$ is the *tail endpoint*
     and $v'$ is the *head endpoint* of the edge $e$.
**** Remarks
     - Some authors, define $E\subset V\times V$, or a bit
       inaccurately, omit the connection map and use the $G=(E,V)$
       notation.
     - For every directed graph $G=(\psi, E, V)$ there is a
       *corresponding undirected graph* $G'=(\varphi, E, V)$ which can
       be obtained by ``forgetting'' the direction, \ie if $\psi(e) =
       (v,v')$ then $\varphi=\{v,v'\}$.
       It is also said that $G$ is an *orientation* of $G'$.  One
       graph usually has multiple orientations.
*** Other definitions
    Most of the definitions, \eg labels, weights \etc, from undirected
    graphs can be extended onto directed graphs by considering the
    corresponding undirected graph.
**** Transpose, strictly parallel, $E^+(S)$ and $E^-(S)$,      :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - The *transpose* of the graph $G=(\psi, E, V)$ is $G'=(\psi', E,
       V)$ for which $\psi(e)=(v,v')$ if and only if
       $\psi'(e)=(v',v)$.  (Of course, the reversed loop is equal to
       itself.)
     - The edges $e_1\neq e_2$, are *strictly parallel* if
       $\psi(e_1)=\psi(e_2)$.
     - Let $S\subset V$, then $E^+(S)$ the set of edges with tail
       endpoints in $S$ and head endpoints in $V\setminus S$, or
       $E^+(S)=\{e\in E : \exists v \exists v' ( v\in S \land v'\in V
       \setminus S \land (v,v')=\psi(e)) \}$
     - $E^-(S)$ is the set of edges with tail endpoints in $V\setminus
       S$ and head endpoints in $S$ or $E^-(S)=\{e\in E : \exists v
       \exists v' ( v\in S \land v'\in V \setminus S \land
       (v',v)=\psi(e)) \}$
     - $E(S) = E^+(S)\cup E^-(S)$ and $E^+(S)=E^-(V \setminus S)$.
*** Degrees of vertices
**** Out\-degree and in\-degree, sink and source	       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - The *out\-degree* of the vertex $v\in V$ is
       $d^+(v)=\card{\{e\in E : \exists v' (v'\in V \land
       (v,v')=\psi(e) )\}}$ (sometimes $\deg^+(v)$ or $\delta^+(v)$),
       \ie the number of edges with tail endpoint $v$.  If $d^+(v)=0$
       then $v$ is a *sink*.
     - The *in\-degree* of the vertex $v\in V$ is $d^-(v)=\card{\{e\in
       E : \exists v' (v'\in V \land (v',v)=\psi(e) )\}}$ (sometimes
       $\deg^-(v)$ or $\delta^-(v)$), \ie the number of edges with
       head endpoint $v$.  If $d^-(v)=0$ then $v$ is a *source*.
     - A in a finite directed graph, then \[ \sum_{v\in V}d^+(v) =
       \sum_{v\in V}d^-(v) = \card{E} \] since each edge increases
       both sums by one (by introducing one tail and one head
       endpoint).
** Isomorphic graphs
*** Isomorphism for directed graphs
**** Isomorphism for directed graphs			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The graphs $G=(\psi, E, V)$ and $G'=(\psi', E', V')$ are
     *isomorphic* if $\exists f\colon E \to E'$ bijection and $\exists
     g\colon V\to V'$ bijection, so $\forall e\in E$ $\psi(e)=(v,v')
     \iff \psi(f(e))=(g(v),g(v'))$ \ie the $(f,g)$ pair preserves the
     ``tail'' and ``head endpoint'' relations.
**** Some special graphs 					  :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :END:
     Again we can talk about a class (or set) of graphs as one graph,
     \eg $\vec{C}_n$ is the directed cycle of $n$ vertices,
     $\vec{P}_n$ is the $n$ long directed path, $\vec{S}_n$ is the
     directed star, with $n$ vertices with zero in\-degrees and one
     out\-degrees and one vertex with $n$ in\-degrees and zero
     out\-degrees, $\vec{K}_n$ is the directed complete graph.

** Representation of graphs
*** List representation
**** List representation
     A directed graphs can be represented with an array of lists.
     - After enumerating the vertices, each entry in the array is a
       list of $(n,n')$ pairs, where $n$ is the number of $v$ and
       $n'$ the number of $v'$.
     - Additional information van be stored with the list entries.
     - For undirected graphs, each edge is stored two times, once for
       each endpoint.
*** Matrix representation
    An $m \times n$ matrix is a table of $m$ rows and $n$ columns, and
    the $i$-th row and $j$-th column is $a_{i,j}$ ($1 \le i \le m$ and
    $1 \le j \le n$).  

    Let $G=(\psi,E,V)$ be a directed graph, $E=\{e_1,e_2,\ldots,e_m\}$,
    $V=\{v_1,v_2,\ldots,v_n\}$.
**** Incidence matrix
     - The *incidence matrix* of $G$ is an $n \times m$ matrix, where $1
       \le i \le n$, $1 \le j \le m$ and $a_{i,j}=1$ if $v_i$ is a tail
       endpoint of $e_j$ and $a_{i,j}=-1$ if $v_i$ is a head endpoint of
       $e_j$.
     - If $G$ is undirected, then the elements of the matrix are
       $\lvert a_{i,j} \rvert$.
**** Adjacency matrix
     - The *adjacency matrix* for $G$ is an $n \times n$ matrix where
       $1 \le i,j \le n$ and $a_{i,j}$ is the number of edges from
       $v_i$ to $v_j$.
     - If $G$ is undirected, $a_{i,i}$ is the number of loop edges
       connected to $v_i$ and $a_{i,j}$ is the number of edges
       connecting $v_i$ and $v_j$.
** Sub\-graphs
*** Sub\-graphs
**** Directed sub\-graphs				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - The graph $G'=(\psi', E', V')$ is a *directed sub\-graph* of
       $G=(\psi, E, V)$ if $E'\subset E$, $V' \subset V$ and
       $\psi'\subset \psi$.  It also said that $G$ is a *directed
       super\-graph* of $G'$.
     - If $E'$ contains all edges with both tail and head endpoints in
       $V'$, then $G'$ is a *saturated* sub\-graph induced by $V'$.
     - If $G'=(\psi, E', V')$ is a directed sub\-graph of $G=(\psi, E,
       V)$, then the *complement* of $G'$ with respect to $G$ is the
       graph $(\psi\vert_{E\setminus E'}, E\setminus E', V)$.  If $G$
       is not explicitly stated, then it is understood to be the
       complement with respect to the complete graph.
*** Deleting edges and vertices
**** Deleting edges and vertices from graphs 		       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\psi, E, V)$ be a directed graph.
     - If $E'\subset E$, then the sub\-graph obtained by deleting the
       set of edges $E'$ is $G'=(\psi\vert_{E\setminus E'}, E\setminus
       E', V)$.
     - If $V'\subset V$, then let $E'=\{e\in E : \exists v \exists v'
       (\psi(e)=(v,v') \lor \psi(e)=(v',v)) \land v\in V'\}$ then the
       sub\-graph obtained by deleting the set of vertices $V'$ is
       $G'=(\psi\vert_{E\setminus E'}, E\setminus E', V\setminus V')$.
*** Walks, trails, routes 
**** Directed walks, trails, routes and cycles		       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\psi, E, V)$ be a directed graph.  
     - An *directed walk of length $n$ from $v$ to $v'$* in $G$ is a
       finite sequence $v_0,e_1,v_1,e_2,v_2,\ldots,v_{n-1},e_n,v_n$,
       where the $\psi(e_i)=(v_{i-1},v_i)$ for each $1\le i \le n$
       with $v_0=v$ and $v_n=v'$.
     - If $v=v'$ then it is a *closed directed walk*, otherwise it is
       an *open directed walk*.
     - If all the edges differ in a directed walk, then it is a
       *directed trail*.
     - If the directed walk is closed, then it is a *closed directed
       trail*, otherwise it is an *open directed trail*.
     - A directed walk is a *directed route* if all the
       $v_0,v_1,\ldots,v_n$ vertices are different.  
     - A directed trail of at least one length is a *directed cycle*,
       if all the vertices are different except the first and the last
       one.
*** Strong connectivity    
**** Strong connectivity				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - A directed graph is *strongly connected* if between any pair of
       vertices $(v,v')$ there is a directed route from $v$ to $v'$
       (and as a consequence, there has to be also a directed route
       from $v'$ to $v$).
     - On the vertices of a given directed graph, the relation that
       there is a directed route from one vertex to another and from
       the other one to the first, is an equivalence relation,
       therefore it defines a classification of the vertices.
     - A directed sub\-graph induced by the vertices in one such class
       is a *strong component* of the directed graph.
     - Unlike with undirected graphs, not all edges belong to a
       component.
     - A graph is strongly connected if and only if all of it's
       vertices belong to one class, \ie it has only one strong
       component.
*** Example
    #+BEGIN_LaTeX
    \begin{tikzpicture}[node]
    \draw
    (0,0)     node (v1) {$v_1$} 
    ++(0,2)   node (v2) {$v_2$} 
    ++(2,-1)  node (v3) {$v_3$} 
    ++(2,0)   node (vp3) {$v_3'$}
    ++(2,1)   node (vp2) {$v_2'$}
    ++(0,-2)  node (vp1) {$v_1'$}
    ;
    \draw[->] 
    (v1) edge (v2) (v2) edge (v3) (v3) edge (v1) 
    (v3) edge (vp3) 
    (vp1) edge (vp2) (vp2) edge (vp3) (vp3) edge (vp1)
    ;
    \end{tikzpicture}
    #+END_LaTeX
*** Comparison between connected and strongly connected graphs
    The above graph is connected but not /strongly/ connected.
    $\{v_1,v_2,v_3\}$ and $\{v_1',v_2',v_3'\}$ are the two /strong/
    components of the graph, and the edge between $v_3$ and $v_3'$
    does not belong to either of them.
** Directed trees
*** Directed trees
**** Directed tree					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - A *directed tree* is a directed graph which is an (undirected)
       tree, and exactly one vertex with in\-degree 0 and all the
       other vertices with in\-degree 1. (A directed tree can be
       defined as the traverse of the above defined graph.)
     - The vertex with in\-degree 0 is the *root* of a tree. 
     - Using induction on the length of a route, it can be shown, that
       there is exactly one (directed) route to each vertex from the
       root.  The length of this route is the *depth* of the vertex.
     - The maximum of the depths of vertices is the *height* the tree.
     - If there is an edge with $v$ as its tail endpoint and $v'$ as
       its head endpoint, then $v$ is the *parent* of $v'$ and $v'$ is
       a *child* of $v$, If two vertices have the same parent then
       they are *siblings*.
     - The vertices of a directed tree with out\-degree 0 are the
       *leaves*.
*** Sub\-tree, rooted tree
**** Sub\-tree						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - For each vertex $v$ there is a unique set of vertices to which
       there leads a directed route from $v$.  The directed sub\-graph
       induced by these vertices is a directed tree with $v$ as its
       root, and this directed sub\-graph is the *directed sub\-tree*
       with $v$ as its root.
**** Rooted tree					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - An undirected tree with a vertex designated as the root is a
       *rooted tree*.
       - There exists exactly one orientation of that tree which is a
	 directed tree with the same root vertex as the designated one:
	 each vertex is the head endpoint of the last edge of the one
	 route from the designated root vertex to the mentioned vertex
	 (which will be the tail endpoint for all the other edges).
       - Therefore designating a root vertex is equivalent with
	 providing an orientation of a directed tree.
*** Binary trees, ternary trees, $q$-ary trees
**** $q$-ary tree
     - A *$q$-ary tree* is a directed tree with edges labeled with
       non-negative integers less then $q$, so that all edges coming
       from the same vertex have different labels.
     - The most notable case is $q=2$ \ie the *binary tree*: here
       *left edge*, or *left child* and *right edge* or *right child*
       are used instead of labels $0$ and $1$.
       - We remark, that if two $q$-ary trees differ only in the labels,
	 they are still considered not equal, \eg in a binary tree with
	 only one edge, it's important if it's a left or a right edge.
     - Directed trees are usually drawn with the root at the top.
       [fn::This isn't consistent with the name ``tree'', but it's
       consistent with the way we think about them, a parent is above
       the children etc.]
*** Dijkstra's algorithm
**** Dijkstra's algorithm 					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Let $(\psi, E, V, w)$ be a directed weighted graph with $w(e)>0$
     for each $e\in E$, $s\in V$ and $T\subset V$.

     The following algorithm calculates $d(v)=$ the minimal weight of
     directed routes from $s$ to $v$, for each $v\in T$ (or $+\infty$
     if there is no route).
  
     1. Initialization: $S\gets \emptyset$ ($S$ is the set of
        ``finished'' vertices), $H\gets \{s\}$, $H$ is the set of
        vertices ``being processed'') and $d(s)\gets 0$; $v\in
        V\setminus \{v\}$ $d(v)\gets +\infty$.  , .)
     2. Terminate?: If $T\subset S$ or $H=\emptyset$, then terminate.
     3. Expand $S$: Let $t\in H$ so that $d(t)=\min\{d(t'):t'\in H\}$.
        $S\gets S\cup \{t\}$ and $H\gets H\setminus \{t\}$, and for
        each edge $e$ coming from $t$ to $v\in V\setminus S$, 
	- if $d(t)+w(e)<d(v)$, then $d(v)\gets d(t)+w(e)$ 
	- if $v\not\in H$, then put $v$ into $H$.
     4. Go to 2.
*** Proof of Dijkstra's algorithm
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - The proof is by induction on the number of elements of $S$, by
       showing that 
       1. for every $t\in S$ the value of $d(t)$ is the minimal weight
          of the directed routes from $s$ to $t$, and
       2. if $v\in H$, then every directed walk from $s$ to $v$, which
          has every vertex in $S$ except $v$, has weight at least
          $d(v)$.
     - After the first initialization step, this is trivially true.
     - Let $t\in H$ (chosen in the third step), and consider an
       arbitrary directed walk with weight $W$ from $s$ to $t$. We
       will show, that $W\ge d(t)$.
*** Proof of Dijkstra's algorithm
**** Proof part 2
     - Let $t'$ be the first vertex on the walk which is not in $S$
       and $W'$ the weight of the sub\-walk from $s$ to $t'$.  
     - $W'\le W$, and by the second part of the induction
       hypothesis $W'\ge d(t')$, and because we chose $t$ to have
       minimal value of $d(t)$ we have $d(t)\le d(t')$, so $W\ge d(t)$
       concludes the proof of the first part of our statement.  
     - After updating the value of $d(v)$ in the third step, if a walk
       goes from $s$ to $v$ and its last vertex is not in $S$, then
       let $v'$ be the vertex before the last and $e$ the last edge.
     - Since $v'\in S$ and the weight of the sub-walk from $s$ to $v'$
       is at least $d(v')$, the weight of the entire walk has to be at
       least $d(v')+w(e)$, and when $v'$ is added to $S$ it can be set
       at most to this value, and after it can only decrease.
* Planar graphs, chromatic number
** Drawing graphs in a plane
*** Planar graphs
**** Planar graph					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - A *planar graph* is a graph that can be embedded in the plane
       ($\R^2$), \ie, it can be drawn on the plane in such a way that
       its edges intersect only at their endpoints. (Drawing a graph can
       be generalized to any metric space, \eg $\R^n$)
     - Obviously, not all graphs can be drawn, \eg it is possible that
       a graph has so many vertices that there is no injective map
       $f\colon V\to X$.  That is why we are only considering finite
       graphs.
     - The statements about drawing graphs are only about simple
       graphs, but they can easily be extended to non-simple graphs as
       well.
     - We are concerned only about drawing graphs in the plane, sphere
       and in the (three dimensional) space.
*** Drawing graphs
**** Drawing in $\R^3$ 						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Any finite simple graph can be drawn in $\R^3$.  
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - If it has at most three vertices, the statement is trivial.
     - We proceed by induction on the number of vertices: select a
       vertex $v$, and the sub\-graph induced by the rest of the
       vertices can be drawn in $\R^3$.
     - Each three of the images of these vertices in $\R^3$ defines a
       plane.  Choose the image of $v$ so that it is not on any of
       these planes.  Let the images of edges connected to $v$ be
       linear functions.
*** Drawing in the plane
**** Drawing on a sphere 					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     A simple finite graph $G=(\psi, E, V)$ can be drawn on the
     surface of a sphere (in $\R^3$) if and only if it can be drawn on
     the plane.
**** Faces						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     An open subset $X$ of $\R^n$ is a *face* (or a *region*) if any
     two points of $X$ there exists a simple curve in $X$ with those
     two points as its endpoints.
**** Euler's theorem 						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Let $(f,g)$ be a drawing in the plane of a simple connected graph
     $G=(\psi, E, V)$.  Then the complement set of $G'=\cup_{e\in E}
     \rng(g_e)$ is the union of $2+\card{E}-\card{V}$ number of
     pairwise disjoint faces.
*** Topologival isomorphism
**** Topologically isomorphic graphs 			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The finite graphs $G$ and $G'$ are *topologically isomorphic* if
     they can be converted to isomorphic graphs using the following
     transformation or its inverse: delete a vertex with degree two
     and connect its neighboring vertices with an edge.
**** Kuratowski's theorem 					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     A simple and finite graph can be drawn in a plane if and only if
     it has no sub\-graph topologically isomorphic to the $K_5$
     complete graph with 5 vertices or the $K_{3,3}$ ``three houses,
     three wells'' graph.
** Chromatic number
*** Chromatic number
**** $k$-coloring 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A *$k$-coloring* of a graph $G$ is a vertex coloring using only
     $k$ colors, such that no two adjacent vertices receive the same
     color.
**** Chromatic number					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The *chromatic number* of a graph is the smallest value of $k$
     possible to obtain a $k$-coloring of the graph.
**** Four color theorem 					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Every planar graph is 4-colorable.
